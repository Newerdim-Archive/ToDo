openapi: 3.0.2
info:
  title: ToDo API
  version: '1.0'
servers:
  - url: 'http://localhost:8080/api/'
    description: Main (development) server
tags:
  - name: Authentication
  - name: Profile
  - name: To-Do
paths:
  /auth/external-log-in:
    post:
      tags:
        - Authentication
      summary: Logs the existing user in with an external provider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - provider
              properties:
                token:
                  type: string
                  description: Valid token from external provider
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                provider:
                  type: string
                  enum:
                    - Google
                  example: Google
      responses:
        '200':
          description: 'If the request is valid, returns ''Ok'' with a message and an access token. Also adds a refresh token to the cookies'
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1refresh-tokens/get/responses/200/content/application~1json/schema'
              example:
                message: Logged in successfully
                data: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          description: 'If request is invalid, returns ''Bad Request'' with message and errors'
          content:
            application/json:
              schema:
                description: Bad request with validation errors
                type: object
                properties:
                  message:
                    type: string
                    nullable: false
                  errors:
                    type: array
                    nullable: false
                    items:
                      type: object
                      nullable: false
                      properties:
                        property:
                          type: string
                          nullable: false
                        messages:
                          type: array
                          nullable: false
                          items:
                            type: string
                            nullable: false
                example:
                  message: One or more validation errors occurred
                  errors:
                    - propertyName: Property 1
                      messages:
                        - '''Property 1'' is required'
                    - propertyName: Property 2
                      messages:
                        - '''Property 2'' is invalid'
        '401':
          description: 'If the user does not exist, returns ''Unauthorized'' with a message'
          content:
            application/json:
              schema:
                $ref: '#/paths/~1profiles~1current/get/responses/401/content/application~1json/schema'
              example:
                message: User not exist
  /auth/external-sign-up:
    post:
      tags:
        - Authentication
      summary: Signs a new user up with an external provider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - provider
              properties:
                token:
                  type: string
                  description: Valid token from external provider
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                provider:
                  type: string
                  enum:
                    - Google
                  example: Google
      responses:
        '200':
          description: 'If request is valid, returns ''Ok'' with a message and an access token. Also adds refresh token to cookies'
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1refresh-tokens/get/responses/200/content/application~1json/schema'
              example:
                message: Signed up successfully
                data: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '400':
          $ref: '#/paths/~1auth~1external-log-in/post/responses/400'
        '409':
          description: 'If user already exists, returns ''Conflict'' with a message'
          content:
            application/json:
              schema:
                $ref: '#/paths/~1auth~1log-out/post/responses/200/content/application~1json/schema'
              example:
                message: User already exists
  /auth/log-out:
    post:
      tags:
        - Authentication
      summary: Logs the user out and removes the refresh token from cookies
      responses:
        '200':
          description: 'If logged out successfully, returns ''Ok'' with a message'
          content:
            application/json:
              schema:
                description: Base response with a message
                type: object
                properties:
                  message:
                    type: string
                example:
                  message: Created resource successfully
              example:
                message: Logged out successfully
  /auth/refresh-tokens:
    get:
      tags:
        - Authentication
      summary: Refreshes the access token and the refresh token
      responses:
        '200':
          description: 'If tokens have been refreshed successfully, returns ''Ok'' with a message and a new access token. Also adds a new refresh token to cookies'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: false
                  data:
                    type: object
                    nullable: true
              example:
                message: Tokens have been refreshed successfully
                data: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        '401':
          description: 'If the refresh token is invalid, expired or does not exist, returns ''Unauthorized'' with a message'
          content:
            application/json:
              schema:
                $ref: '#/paths/~1profiles~1current/get/responses/401/content/application~1json/schema'
              example:
                message: Refresh token is invalid or expired
  /profiles/current:
    get:
      tags:
        - Profile
      summary: Get the current profile
      responses:
        '200':
          description: 'If the profile exists, returns ''Ok'' with a message and a profile'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: false
                  data:
                    type: object
                    nullable: true
                    properties:
                      username:
                        type: string
                        nullable: false
                      email:
                        type: string
                        nullable: false
                      profilePictureUrl:
                        type: string
                        nullable: false
                example:
                  message: Got current profile successfully
                  data:
                    username: User1
                    email: User1@mail.com
                    profilePictureUrl: www.example.com/picture/1
        '401':
          description: 'If the profile does not exist (user was deleted), returns ''Unauthorized'' with a message'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: false
                example:
                  message: 'You do not have permission. Please, log in first'
              example:
                message: User not exist
  /todos:
    post:
      tags:
        - To-Do
      summary: Create a new to-do
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                description:
                  type: string
                deadline:
                  type: string
                  description: Date
              example:
                title: Task 1
                description: Description 1
                deadline: '2021-05-28T18:57:21.3249529+02:00'
      responses:
        '200':
          description: 'If created a to-do successfully, returns ''Ok'' with a message and a to-do'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                        nullable: false
                      title:
                        type: string
                        nullable: false
                      description:
                        type: string
                        nullable: true
                      deadline:
                        type: string
                        description: Date
                        nullable: true
                      completed:
                        type: boolean
                        nullable: false
                example:
                  message: Got to-do successfully
                  data:
                    id: 1
                    title: Task 1
                    description: Description 1
                    deadline: '2021-05-28T18:57:21.3249529+02:00'
                    completed: false
        '401':
          $ref: '#/paths/~1todos/get/responses/401'
    get:
      tags:
        - To-Do
      summary: Get all to-do's from user
      responses:
        '200':
          description: 'If got to-do''s successfully, returns ''Ok'' with message and to-do''s'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                        email:
                          type: string
                        profilePictureUrl:
                          type: string
                example:
                  message: Got all user to-do's successfully
                  data:
                    - id: 1
                      title: Task 1
                      description: Description 1
                      deadline: '2021-05-28T18:57:21.3249529+02:00'
                      completed: false
                    - id: 2
                      title: Task 2
                      description: Description 2
                      deadline: '2021-05-39T18:57:21.3249529+02:00'
                      completed: true
        '401':
          description: 'If you are not authenticated, returns ''Unauthorized'' with a message'
          content:
            application/json:
              schema:
                $ref: '#/paths/~1profiles~1current/get/responses/401/content/application~1json/schema'
  '/todos/{id}':
    get:
      tags:
        - To-Do
      summary: Get a to-do by id from the user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Id of the to-do
      responses:
        '200':
          description: 'If got the to-do successfully, returns ''Ok'' with a message and a to-do'
          content:
            application/json:
              schema:
                $ref: '#/paths/~1todos/post/responses/200/content/application~1json/schema'
        '401':
          $ref: '#/paths/~1todos/get/responses/401'
        '404':
          description: 'If the to-do does not exist, returns ''Not Found'' with a message'
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: false
                example:
                  message: Resource not found
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
security:
  - BearerAuth: []
